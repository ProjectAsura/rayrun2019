//-----------------------------------------------------------------------------
// File : s3d_bvh.h
// Desc : Bounding Volume Hierarchy.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <s3d_math.h>
#include <vector>


namespace s3d {

struct Face
{
    uint32_t idxP[3];
    uint32_t idxN[3];
};

///////////////////////////////////////////////////////////////////////////////
// Node2 structure
///////////////////////////////////////////////////////////////////////////////
struct Node2
{
    int     children[2];    // 葉ノードなら-1が入る.
    AABB    box;            // 子供をまとめたAABB.
    size_t  faceId;         // 葉ノードの場合の面番号.
};

///////////////////////////////////////////////////////////////////////////////
// BVH2 class
///////////////////////////////////////////////////////////////////////////////
class BVH2
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================
    BVH2();
    ~BVH2();

    bool Build(
        const float*    positions,
        const float*    normals,
        const uint32_t* indices,
        size_t          faceCount);

    bool Intersect() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    std::vector<Node2>      m_Nodes;
    std::vector<Triangle>   m_Triangles;

    //=========================================================================
    // private methods.
    //=========================================================================
    Node2 BuildNode();
};


} // namespace s3d